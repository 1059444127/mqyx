package com.psc.pt.dao.user;

import com.psc.pt.model.user.UserCheck;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Component;
@Component("UserCheckMapper")
public interface UserCheckMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param id  Primary key for table user_check
     * @return deleteByPrimaryKey
     *
     * @mbggenerated
     */
    @Delete({
        "delete from user_check",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param record  Model for table user_check
     * @return   The last insert key for table user_check
     *
     * @mbggenerated
     */
    @Insert({
        "insert into user_check (user_name, password, ",
        "salt, group_id, is_delete)",
        "values (#{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, ",
        "#{salt,jdbcType=VARCHAR}, #{groupId,jdbcType=BIGINT}, #{isDelete,jdbcType=CHAR})"
    })
    @SelectKey(statement="SELECT SCOPE_IDENTITY()", keyProperty="id", before=false, resultType=Long.class)
    int insert(UserCheck record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param record  Model for table user_check
     * @return   The last insert key for table user_check
     *
     * @mbggenerated
     */
    @InsertProvider(type=UserCheckSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT SCOPE_IDENTITY()", keyProperty="id", before=false, resultType=Long.class)
    int insertSelective(UserCheck record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param id  Primary key for table user_check
     * @return   Model for table user_check
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, user_name, password, salt, group_id, is_delete",
        "from user_check",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_name", property="userName", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.BIGINT),
        @Result(column="is_delete", property="isDelete", jdbcType=JdbcType.CHAR)
    })
    UserCheck selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param record  Model for table user_check
     * @return   The last insert key for table user_check
     *
     * @mbggenerated
     */
    @UpdateProvider(type=UserCheckSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(UserCheck record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_check
     * @param record  Model for table user_check
     * @return   The last insert key for table user_check
     *
     * @mbggenerated
     */
    @Update({
        "update user_check",
        "set user_name = #{userName,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "salt = #{salt,jdbcType=VARCHAR},",
          "group_id = #{groupId,jdbcType=BIGINT},",
          "is_delete = #{isDelete,jdbcType=CHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(UserCheck record);
	
	/**
     * 根据userName检索
     * @param userName
     * @return
     */
    @Select({
		"select",
        "id, user_name, password, salt, group_id, is_delete",
        "from user_check",
        "where user_name = #{userName,jdbcType=VARCHAR} AND is_delete != 0"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_name", property="userName", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="salt", property="salt", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.BIGINT),
        @Result(column="is_delete", property="isDelete", jdbcType=JdbcType.CHAR)
    })
	UserCheck selectByUserName(String userName);
}